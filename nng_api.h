// THIS FILE WAS AUTOMATICALLY GENERATED BY ./generate_api.sh
typedef struct nng_ctx_s {
 uint32_t id;
} nng_ctx;
typedef struct nng_dialer_s {
 uint32_t id;
} nng_dialer;
typedef struct nng_listener_s {
 uint32_t id;
} nng_listener;
typedef struct nng_pipe_s {
 uint32_t id;
} nng_pipe;
typedef struct nng_socket_s {
 uint32_t id;
} nng_socket;
typedef int32_t nng_duration;
typedef struct nng_msg nng_msg;
typedef struct nng_stat nng_stat;
typedef struct nng_aio nng_aio;
struct nng_sockaddr_inproc {
 uint16_t sa_family;
 char sa_name[(128)];
};
struct nng_sockaddr_path {
 uint16_t sa_family;
 char sa_path[(128)];
};
struct nng_sockaddr_in6 {
 uint16_t sa_family;
 uint16_t sa_port;
 uint8_t sa_addr[16];
 uint32_t sa_scope;
};
struct nng_sockaddr_in {
 uint16_t sa_family;
 uint16_t sa_port;
 uint32_t sa_addr;
};
struct nng_sockaddr_zt {
 uint16_t sa_family;
 uint64_t sa_nwid;
 uint64_t sa_nodeid;
 uint32_t sa_port;
};
struct nng_sockaddr_abstract {
 uint16_t sa_family;
 uint16_t sa_len;
 uint8_t sa_name[107];
};
struct nng_sockaddr_storage {
 uint16_t sa_family;
 uint64_t sa_pad[16];
};
typedef struct nng_sockaddr_inproc nng_sockaddr_inproc;
typedef struct nng_sockaddr_path nng_sockaddr_path;
typedef struct nng_sockaddr_path nng_sockaddr_ipc;
typedef struct nng_sockaddr_in nng_sockaddr_in;
typedef struct nng_sockaddr_in6 nng_sockaddr_in6;
typedef struct nng_sockaddr_zt nng_sockaddr_zt;
typedef struct nng_sockaddr_abstract nng_sockaddr_abstract;
typedef struct nng_sockaddr_storage nng_sockaddr_storage;
typedef union nng_sockaddr {
 uint16_t s_family;
 nng_sockaddr_ipc s_ipc;
 nng_sockaddr_inproc s_inproc;
 nng_sockaddr_in6 s_in6;
 nng_sockaddr_in s_in;
 nng_sockaddr_zt s_zt;
 nng_sockaddr_abstract s_abstract;
 nng_sockaddr_storage s_storage;
} nng_sockaddr;
enum nng_sockaddr_family {
 NNG_AF_UNSPEC = 0,
 NNG_AF_INPROC = 1,
 NNG_AF_IPC = 2,
 NNG_AF_INET = 3,
 NNG_AF_INET6 = 4,
 NNG_AF_ZT = 5,
 NNG_AF_ABSTRACT = 6
};
typedef struct nng_iov {
 void * iov_buf;
 size_t iov_len;
} nng_iov;
extern void nng_fini(void);
extern int nng_close(nng_socket);
extern int nng_socket_id(nng_socket);
extern int nng_socket_set(nng_socket, const char *, const void *, size_t);
extern int nng_socket_set_bool(nng_socket, const char *, bool);
extern int nng_socket_set_int(nng_socket, const char *, int);
extern int nng_socket_set_size(nng_socket, const char *, size_t);
extern int nng_socket_set_uint64(nng_socket, const char *, uint64_t);
extern int nng_socket_set_string(nng_socket, const char *, const char *);
extern int nng_socket_set_ptr(nng_socket, const char *, void *);
extern int nng_socket_set_ms(nng_socket, const char *, nng_duration);
extern int nng_socket_set_addr(
    nng_socket, const char *, const nng_sockaddr *);
extern int nng_socket_get(nng_socket, const char *, void *, size_t *);
extern int nng_socket_get_bool(nng_socket, const char *, bool *);
extern int nng_socket_get_int(nng_socket, const char *, int *);
extern int nng_socket_get_size(nng_socket, const char *, size_t *);
extern int nng_socket_get_uint64(nng_socket, const char *, uint64_t *);
extern int nng_socket_get_string(nng_socket, const char *, char **);
extern int nng_socket_get_ptr(nng_socket, const char *, void **);
extern int nng_socket_get_ms(nng_socket, const char *, nng_duration *);
extern int nng_socket_get_addr(nng_socket, const char *, nng_sockaddr *);
typedef enum {
 NNG_PIPE_EV_ADD_PRE,
 NNG_PIPE_EV_ADD_POST,
 NNG_PIPE_EV_REM_POST,
 NNG_PIPE_EV_NUM,
} nng_pipe_ev;
typedef void (*nng_pipe_cb)(nng_pipe, nng_pipe_ev, void *);
extern int nng_pipe_notify(nng_socket, nng_pipe_ev, nng_pipe_cb, void *);
extern int nng_listen(nng_socket, const char *, nng_listener *, int);
extern int nng_dial(nng_socket, const char *, nng_dialer *, int);
extern int nng_dialer_create(nng_dialer *, nng_socket, const char *);
extern int nng_listener_create(nng_listener *, nng_socket, const char *);
extern int nng_dialer_start(nng_dialer, int);
extern int nng_listener_start(nng_listener, int);
extern int nng_dialer_close(nng_dialer);
extern int nng_listener_close(nng_listener);
extern int nng_dialer_id(nng_dialer);
extern int nng_listener_id(nng_listener);
extern int nng_dialer_set(nng_dialer, const char *, const void *, size_t);
extern int nng_dialer_set_bool(nng_dialer, const char *, bool);
extern int nng_dialer_set_int(nng_dialer, const char *, int);
extern int nng_dialer_set_size(nng_dialer, const char *, size_t);
extern int nng_dialer_set_uint64(nng_dialer, const char *, uint64_t);
extern int nng_dialer_set_string(nng_dialer, const char *, const char *);
extern int nng_dialer_set_ptr(nng_dialer, const char *, void *);
extern int nng_dialer_set_ms(nng_dialer, const char *, nng_duration);
extern int nng_dialer_set_addr(
    nng_dialer, const char *, const nng_sockaddr *);
extern int nng_dialer_get(nng_dialer, const char *, void *, size_t *);
extern int nng_dialer_get_bool(nng_dialer, const char *, bool *);
extern int nng_dialer_get_int(nng_dialer, const char *, int *);
extern int nng_dialer_get_size(nng_dialer, const char *, size_t *);
extern int nng_dialer_get_uint64(nng_dialer, const char *, uint64_t *);
extern int nng_dialer_get_string(nng_dialer, const char *, char **);
extern int nng_dialer_get_ptr(nng_dialer, const char *, void **);
extern int nng_dialer_get_ms(nng_dialer, const char *, nng_duration *);
extern int nng_dialer_get_addr(nng_dialer, const char *, nng_sockaddr *);
extern int nng_listener_set(
    nng_listener, const char *, const void *, size_t);
extern int nng_listener_set_bool(nng_listener, const char *, bool);
extern int nng_listener_set_int(nng_listener, const char *, int);
extern int nng_listener_set_size(nng_listener, const char *, size_t);
extern int nng_listener_set_uint64(nng_listener, const char *, uint64_t);
extern int nng_listener_set_string(nng_listener, const char *, const char *);
extern int nng_listener_set_ptr(nng_listener, const char *, void *);
extern int nng_listener_set_ms(nng_listener, const char *, nng_duration);
extern int nng_listener_set_addr(
    nng_listener, const char *, const nng_sockaddr *);
extern int nng_listener_get(nng_listener, const char *, void *, size_t *);
extern int nng_listener_get_bool(nng_listener, const char *, bool *);
extern int nng_listener_get_int(nng_listener, const char *, int *);
extern int nng_listener_get_size(nng_listener, const char *, size_t *);
extern int nng_listener_get_uint64(nng_listener, const char *, uint64_t *);
extern int nng_listener_get_string(nng_listener, const char *, char **);
extern int nng_listener_get_ptr(nng_listener, const char *, void **);
extern int nng_listener_get_ms(nng_listener, const char *, nng_duration *);
extern int nng_listener_get_addr(nng_listener, const char *, nng_sockaddr *);
extern const char *nng_strerror(int);
extern int nng_send(nng_socket, void *, size_t, int);
extern int nng_recv(nng_socket, void *, size_t *, int);
extern int nng_sendmsg(nng_socket, nng_msg *, int);
extern int nng_recvmsg(nng_socket, nng_msg **, int);
extern void nng_send_aio(nng_socket, nng_aio *);
extern void nng_recv_aio(nng_socket, nng_aio *);
extern int nng_ctx_open(nng_ctx *, nng_socket);
extern int nng_ctx_close(nng_ctx);
extern int nng_ctx_id(nng_ctx);
extern void nng_ctx_recv(nng_ctx, nng_aio *);
extern int nng_ctx_recvmsg(nng_ctx, nng_msg **, int);
extern void nng_ctx_send(nng_ctx, nng_aio *);
extern int nng_ctx_sendmsg(nng_ctx, nng_msg *, int);
extern int nng_ctx_get(nng_ctx, const char *, void *, size_t *);
extern int nng_ctx_get_bool(nng_ctx, const char *, bool *);
extern int nng_ctx_get_int(nng_ctx, const char *, int *);
extern int nng_ctx_get_size(nng_ctx, const char *, size_t *);
extern int nng_ctx_get_uint64(nng_ctx, const char *, uint64_t *);
extern int nng_ctx_get_string(nng_ctx, const char *, char **);
extern int nng_ctx_get_ptr(nng_ctx, const char *, void **);
extern int nng_ctx_get_ms(nng_ctx, const char *, nng_duration *);
extern int nng_ctx_get_addr(nng_ctx, const char *, nng_sockaddr *);
extern int nng_ctx_set(nng_ctx, const char *, const void *, size_t);
extern int nng_ctx_set_bool(nng_ctx, const char *, bool);
extern int nng_ctx_set_int(nng_ctx, const char *, int);
extern int nng_ctx_set_size(nng_ctx, const char *, size_t);
extern int nng_ctx_set_uint64(nng_ctx, const char *, uint64_t);
extern int nng_ctx_set_string(nng_ctx, const char *, const char *);
extern int nng_ctx_set_ptr(nng_ctx, const char *, void *);
extern int nng_ctx_set_ms(nng_ctx, const char *, nng_duration);
extern int nng_ctx_set_addr(nng_ctx, const char *, const nng_sockaddr *);
extern void *nng_alloc(size_t);
extern void nng_free(void *, size_t);
extern void *nng_zalloc(size_t sz);
extern char *nng_strdup(const char *);
extern char *nng_strndup(const char *, size_t);
extern void nng_strfree(char *);
extern char *nng_strcasestr(const char *, const char *);
extern int nng_strcasecmp(const char *, const char *);
extern int nng_strncasecmp(const char *, const char *, size_t);
extern int nng_aio_alloc(nng_aio **, void (*)(void *), void *);
extern void nng_aio_free(nng_aio *);
extern void nng_aio_reap(nng_aio *);
extern void nng_aio_stop(nng_aio *);
extern int nng_aio_result(nng_aio *);
extern size_t nng_aio_count(nng_aio *);
extern void nng_aio_cancel(nng_aio *);
extern void nng_aio_abort(nng_aio *, int);
extern void nng_aio_wait(nng_aio *);
extern bool nng_aio_busy(nng_aio *);
extern void nng_aio_set_msg(nng_aio *, nng_msg *);
extern nng_msg *nng_aio_get_msg(nng_aio *);
extern int nng_aio_set_input(nng_aio *, unsigned, void *);
extern void *nng_aio_get_input(nng_aio *, unsigned);
extern int nng_aio_set_output(nng_aio *, unsigned, void *);
extern void *nng_aio_get_output(nng_aio *, unsigned);
extern void nng_aio_set_timeout(nng_aio *, nng_duration);
extern int nng_aio_set_iov(nng_aio *, unsigned, const nng_iov *);
extern bool nng_aio_begin(nng_aio *);
extern void nng_aio_finish(nng_aio *, int);
typedef void (*nng_aio_cancelfn)(nng_aio *, void *, int);
extern void nng_aio_defer(nng_aio *, nng_aio_cancelfn, void *);
extern void nng_sleep_aio(nng_duration, nng_aio *);
extern int nng_msg_alloc(nng_msg **, size_t);
extern void nng_msg_free(nng_msg *);
extern int nng_msg_realloc(nng_msg *, size_t);
extern int nng_msg_reserve(nng_msg *, size_t);
extern size_t nng_msg_capacity(nng_msg *);
extern void * nng_msg_header(nng_msg *);
extern size_t nng_msg_header_len(const nng_msg *);
extern void * nng_msg_body(nng_msg *);
extern size_t nng_msg_len(const nng_msg *);
extern int nng_msg_append(nng_msg *, const void *, size_t);
extern int nng_msg_insert(nng_msg *, const void *, size_t);
extern int nng_msg_trim(nng_msg *, size_t);
extern int nng_msg_chop(nng_msg *, size_t);
extern int nng_msg_header_append(nng_msg *, const void *, size_t);
extern int nng_msg_header_insert(nng_msg *, const void *, size_t);
extern int nng_msg_header_trim(nng_msg *, size_t);
extern int nng_msg_header_chop(nng_msg *, size_t);
extern int nng_msg_header_append_u16(nng_msg *, uint16_t);
extern int nng_msg_header_append_u32(nng_msg *, uint32_t);
extern int nng_msg_header_append_u64(nng_msg *, uint64_t);
extern int nng_msg_header_insert_u16(nng_msg *, uint16_t);
extern int nng_msg_header_insert_u32(nng_msg *, uint32_t);
extern int nng_msg_header_insert_u64(nng_msg *, uint64_t);
extern int nng_msg_header_chop_u16(nng_msg *, uint16_t *);
extern int nng_msg_header_chop_u32(nng_msg *, uint32_t *);
extern int nng_msg_header_chop_u64(nng_msg *, uint64_t *);
extern int nng_msg_header_trim_u16(nng_msg *, uint16_t *);
extern int nng_msg_header_trim_u32(nng_msg *, uint32_t *);
extern int nng_msg_header_trim_u64(nng_msg *, uint64_t *);
extern int nng_msg_append_u16(nng_msg *, uint16_t);
extern int nng_msg_append_u32(nng_msg *, uint32_t);
extern int nng_msg_append_u64(nng_msg *, uint64_t);
extern int nng_msg_insert_u16(nng_msg *, uint16_t);
extern int nng_msg_insert_u32(nng_msg *, uint32_t);
extern int nng_msg_insert_u64(nng_msg *, uint64_t);
extern int nng_msg_chop_u16(nng_msg *, uint16_t *);
extern int nng_msg_chop_u32(nng_msg *, uint32_t *);
extern int nng_msg_chop_u64(nng_msg *, uint64_t *);
extern int nng_msg_trim_u16(nng_msg *, uint16_t *);
extern int nng_msg_trim_u32(nng_msg *, uint32_t *);
extern int nng_msg_trim_u64(nng_msg *, uint64_t *);
extern int nng_msg_dup(nng_msg **, const nng_msg *);
extern void nng_msg_clear(nng_msg *);
extern void nng_msg_header_clear(nng_msg *);
extern void nng_msg_set_pipe(nng_msg *, nng_pipe);
extern nng_pipe nng_msg_get_pipe(const nng_msg *);
extern int nng_pipe_get(nng_pipe, const char *, void *, size_t *);
extern int nng_pipe_get_bool(nng_pipe, const char *, bool *);
extern int nng_pipe_get_int(nng_pipe, const char *, int *);
extern int nng_pipe_get_ms(nng_pipe, const char *, nng_duration *);
extern int nng_pipe_get_size(nng_pipe, const char *, size_t *);
extern int nng_pipe_get_uint64(nng_pipe, const char *, uint64_t *);
extern int nng_pipe_get_string(nng_pipe, const char *, char **);
extern int nng_pipe_get_ptr(nng_pipe, const char *, void **);
extern int nng_pipe_get_addr(nng_pipe, const char *, nng_sockaddr *);
extern int nng_pipe_close(nng_pipe);
extern int nng_pipe_id(nng_pipe);
extern nng_socket nng_pipe_socket(nng_pipe);
extern nng_dialer nng_pipe_dialer(nng_pipe);
extern nng_listener nng_pipe_listener(nng_pipe);
extern int nng_stats_get(nng_stat **);
extern void nng_stats_free(nng_stat *);
extern void nng_stats_dump(nng_stat *);
extern nng_stat *nng_stat_next(nng_stat *);
extern nng_stat *nng_stat_child(nng_stat *);
extern const char *nng_stat_name(nng_stat *);
extern int nng_stat_type(nng_stat *);
extern nng_stat *nng_stat_find(nng_stat *, const char *);
extern nng_stat *nng_stat_find_socket(nng_stat *, nng_socket);
extern nng_stat *nng_stat_find_dialer(nng_stat *, nng_dialer);
extern nng_stat *nng_stat_find_listener(nng_stat *, nng_listener);
enum nng_stat_type_enum {
 NNG_STAT_SCOPE = 0,
 NNG_STAT_LEVEL = 1,
 NNG_STAT_COUNTER = 2,
 NNG_STAT_STRING = 3,
 NNG_STAT_BOOLEAN = 4,
 NNG_STAT_ID = 5,
};
extern int nng_stat_unit(nng_stat *);
enum nng_unit_enum {
 NNG_UNIT_NONE = 0,
 NNG_UNIT_BYTES = 1,
 NNG_UNIT_MESSAGES = 2,
 NNG_UNIT_MILLIS = 3,
 NNG_UNIT_EVENTS = 4
};
extern uint64_t nng_stat_value(nng_stat *);
extern bool nng_stat_bool(nng_stat *);
extern const char *nng_stat_string(nng_stat *);
extern const char *nng_stat_desc(nng_stat *);
extern uint64_t nng_stat_timestamp(nng_stat *);
extern int nng_device(nng_socket, nng_socket);
extern void nng_device_aio(nng_aio *, nng_socket, nng_socket);
enum nng_errno_enum {
 NNG_EINTR = 1,
 NNG_ENOMEM = 2,
 NNG_EINVAL = 3,
 NNG_EBUSY = 4,
 NNG_ETIMEDOUT = 5,
 NNG_ECONNREFUSED = 6,
 NNG_ECLOSED = 7,
 NNG_EAGAIN = 8,
 NNG_ENOTSUP = 9,
 NNG_EADDRINUSE = 10,
 NNG_ESTATE = 11,
 NNG_ENOENT = 12,
 NNG_EPROTO = 13,
 NNG_EUNREACHABLE = 14,
 NNG_EADDRINVAL = 15,
 NNG_EPERM = 16,
 NNG_EMSGSIZE = 17,
 NNG_ECONNABORTED = 18,
 NNG_ECONNRESET = 19,
 NNG_ECANCELED = 20,
 NNG_ENOFILES = 21,
 NNG_ENOSPC = 22,
 NNG_EEXIST = 23,
 NNG_EREADONLY = 24,
 NNG_EWRITEONLY = 25,
 NNG_ECRYPTO = 26,
 NNG_EPEERAUTH = 27,
 NNG_ENOARG = 28,
 NNG_EAMBIGUOUS = 29,
 NNG_EBADTYPE = 30,
 NNG_ECONNSHUT = 31,
 NNG_EINTERNAL = 1000,
 NNG_ESYSERR = 0x10000000,
 NNG_ETRANERR = 0x20000000
};
typedef struct nng_url {
 char *u_rawurl;
 char *u_scheme;
 char *u_userinfo;
 char *u_host;
 char *u_hostname;
 char *u_port;
 char *u_path;
 char *u_query;
 char *u_fragment;
 char *u_requri;
} nng_url;
extern int nng_url_parse(nng_url **, const char *);
extern void nng_url_free(nng_url *);
extern int nng_url_clone(nng_url **, const nng_url *);
extern const char *nng_version(void);
typedef struct nng_stream nng_stream;
typedef struct nng_stream_dialer nng_stream_dialer;
typedef struct nng_stream_listener nng_stream_listener;
extern void nng_stream_free(nng_stream *);
extern void nng_stream_close(nng_stream *);
extern void nng_stream_send(nng_stream *, nng_aio *);
extern void nng_stream_recv(nng_stream *, nng_aio *);
extern int nng_stream_get(nng_stream *, const char *, void *, size_t *);
extern int nng_stream_get_bool(nng_stream *, const char *, bool *);
extern int nng_stream_get_int(nng_stream *, const char *, int *);
extern int nng_stream_get_ms(nng_stream *, const char *, nng_duration *);
extern int nng_stream_get_size(nng_stream *, const char *, size_t *);
extern int nng_stream_get_uint64(nng_stream *, const char *, uint64_t *);
extern int nng_stream_get_string(nng_stream *, const char *, char **);
extern int nng_stream_get_ptr(nng_stream *, const char *, void **);
extern int nng_stream_get_addr(nng_stream *, const char *, nng_sockaddr *);
extern int nng_stream_set(nng_stream *, const char *, const void *, size_t);
extern int nng_stream_set_bool(nng_stream *, const char *, bool);
extern int nng_stream_set_int(nng_stream *, const char *, int);
extern int nng_stream_set_ms(nng_stream *, const char *, nng_duration);
extern int nng_stream_set_size(nng_stream *, const char *, size_t);
extern int nng_stream_set_uint64(nng_stream *, const char *, uint64_t);
extern int nng_stream_set_string(nng_stream *, const char *, const char *);
extern int nng_stream_set_ptr(nng_stream *, const char *, void *);
extern int nng_stream_set_addr(
     nng_stream *, const char *, const nng_sockaddr *);
extern int nng_stream_dialer_alloc(nng_stream_dialer **, const char *);
extern int nng_stream_dialer_alloc_url(
    nng_stream_dialer **, const nng_url *);
extern void nng_stream_dialer_free(nng_stream_dialer *);
extern void nng_stream_dialer_close(nng_stream_dialer *);
extern void nng_stream_dialer_dial(nng_stream_dialer *, nng_aio *);
extern int nng_stream_dialer_set(
     nng_stream_dialer *, const char *, const void *, size_t);
extern int nng_stream_dialer_get(
    nng_stream_dialer *, const char *, void *, size_t *);
extern int nng_stream_dialer_get_bool(
    nng_stream_dialer *, const char *, bool *);
extern int nng_stream_dialer_get_int(
    nng_stream_dialer *, const char *, int *);
extern int nng_stream_dialer_get_ms(
    nng_stream_dialer *, const char *, nng_duration *);
extern int nng_stream_dialer_get_size(
    nng_stream_dialer *, const char *, size_t *);
extern int nng_stream_dialer_get_uint64(
    nng_stream_dialer *, const char *, uint64_t *);
extern int nng_stream_dialer_get_string(
    nng_stream_dialer *, const char *, char **);
extern int nng_stream_dialer_get_ptr(
    nng_stream_dialer *, const char *, void **);
extern int nng_stream_dialer_get_addr(
    nng_stream_dialer *, const char *, nng_sockaddr *);
extern int nng_stream_dialer_set_bool(
    nng_stream_dialer *, const char *, bool);
extern int nng_stream_dialer_set_int(nng_stream_dialer *, const char *, int);
extern int nng_stream_dialer_set_ms(
    nng_stream_dialer *, const char *, nng_duration);
extern int nng_stream_dialer_set_size(
    nng_stream_dialer *, const char *, size_t);
extern int nng_stream_dialer_set_uint64(
    nng_stream_dialer *, const char *, uint64_t);
extern int nng_stream_dialer_set_string(
    nng_stream_dialer *, const char *, const char *);
extern int nng_stream_dialer_set_ptr(
    nng_stream_dialer *, const char *, void *);
extern int nng_stream_dialer_set_addr(
    nng_stream_dialer *, const char *, const nng_sockaddr *);
extern int nng_stream_listener_alloc(nng_stream_listener **, const char *);
extern int nng_stream_listener_alloc_url(
    nng_stream_listener **, const nng_url *);
extern void nng_stream_listener_free(nng_stream_listener *);
extern void nng_stream_listener_close(nng_stream_listener *);
extern int nng_stream_listener_listen(nng_stream_listener *);
extern void nng_stream_listener_accept(nng_stream_listener *, nng_aio *);
extern int nng_stream_listener_set(
     nng_stream_listener *, const char *, const void *, size_t);
extern int nng_stream_listener_get(
    nng_stream_listener *, const char *, void *, size_t *);
extern int nng_stream_listener_get_bool(
    nng_stream_listener *, const char *, bool *);
extern int nng_stream_listener_get_int(
    nng_stream_listener *, const char *, int *);
extern int nng_stream_listener_get_ms(
    nng_stream_listener *, const char *, nng_duration *);
extern int nng_stream_listener_get_size(
    nng_stream_listener *, const char *, size_t *);
extern int nng_stream_listener_get_uint64(
    nng_stream_listener *, const char *, uint64_t *);
extern int nng_stream_listener_get_string(
    nng_stream_listener *, const char *, char **);
extern int nng_stream_listener_get_ptr(
    nng_stream_listener *, const char *, void **);
extern int nng_stream_listener_get_addr(
    nng_stream_listener *, const char *, nng_sockaddr *);
extern int nng_stream_listener_set_bool(
    nng_stream_listener *, const char *, bool);
extern int nng_stream_listener_set_int(
    nng_stream_listener *, const char *, int);
extern int nng_stream_listener_set_ms(
    nng_stream_listener *, const char *, nng_duration);
extern int nng_stream_listener_set_size(
    nng_stream_listener *, const char *, size_t);
extern int nng_stream_listener_set_uint64(
    nng_stream_listener *, const char *, uint64_t);
extern int nng_stream_listener_set_string(
    nng_stream_listener *, const char *, const char *);
extern int nng_stream_listener_set_ptr(
    nng_stream_listener *, const char *, void *);
extern int nng_stream_listener_set_addr(
    nng_stream_listener *, const char *, const nng_sockaddr *);
extern int nng_msg_getopt(nng_msg *, int, void *, size_t *);
extern int nng_getopt(nng_socket, const char *, void *, size_t *);
extern int nng_getopt_bool(nng_socket, const char *, bool *);
extern int nng_getopt_int(nng_socket, const char *, int *);
extern int nng_getopt_ms(nng_socket, const char *, nng_duration *);
extern int nng_getopt_size(nng_socket, const char *, size_t *);
extern int nng_getopt_uint64(nng_socket, const char *, uint64_t *);
extern int nng_getopt_ptr(nng_socket, const char *, void **);
extern int nng_getopt_string(nng_socket, const char *, char **);
extern int nng_setopt(nng_socket, const char *, const void *, size_t);
extern int nng_setopt_bool(nng_socket, const char *, bool);
extern int nng_setopt_int(nng_socket, const char *, int);
extern int nng_setopt_ms(nng_socket, const char *, nng_duration);
extern int nng_setopt_size(nng_socket, const char *, size_t);
extern int nng_setopt_uint64(nng_socket, const char *, uint64_t);
extern int nng_setopt_string(nng_socket, const char *, const char *);
extern int nng_setopt_ptr(nng_socket, const char *, void *);
extern int nng_ctx_getopt(nng_ctx, const char *, void *, size_t *);
extern int nng_ctx_getopt_bool(nng_ctx, const char *, bool *);
extern int nng_ctx_getopt_int(nng_ctx, const char *, int *);
extern int nng_ctx_getopt_ms(nng_ctx, const char *, nng_duration *);
extern int nng_ctx_getopt_size(nng_ctx, const char *, size_t *);
extern int nng_ctx_setopt(nng_ctx, const char *, const void *, size_t);
extern int nng_ctx_setopt_bool(nng_ctx, const char *, bool);
extern int nng_ctx_setopt_int(nng_ctx, const char *, int);
extern int nng_ctx_setopt_ms(nng_ctx, const char *, nng_duration);
extern int nng_ctx_setopt_size(nng_ctx, const char *, size_t);
extern int nng_dialer_getopt(nng_dialer, const char *, void *, size_t *);
extern int nng_dialer_getopt_bool(nng_dialer, const char *, bool *);
extern int nng_dialer_getopt_int(nng_dialer, const char *, int *);
extern int nng_dialer_getopt_ms(nng_dialer, const char *, nng_duration *);
extern int nng_dialer_getopt_size(nng_dialer, const char *, size_t *);
extern int nng_dialer_getopt_sockaddr(
    nng_dialer, const char *, nng_sockaddr *);
extern int nng_dialer_getopt_uint64(nng_dialer, const char *, uint64_t *);
extern int nng_dialer_getopt_ptr(nng_dialer, const char *, void **);
extern int nng_dialer_getopt_string(nng_dialer, const char *, char **);
extern int nng_dialer_setopt(nng_dialer, const char *, const void *, size_t);
extern int nng_dialer_setopt_bool(nng_dialer, const char *, bool);
extern int nng_dialer_setopt_int(nng_dialer, const char *, int);
extern int nng_dialer_setopt_ms(nng_dialer, const char *, nng_duration);
extern int nng_dialer_setopt_size(nng_dialer, const char *, size_t);
extern int nng_dialer_setopt_uint64(nng_dialer, const char *, uint64_t);
extern int nng_dialer_setopt_ptr(nng_dialer, const char *, void *);
extern int nng_dialer_setopt_string(nng_dialer, const char *, const char *);
extern int nng_listener_getopt(nng_listener, const char *, void *, size_t *);
extern int nng_listener_getopt_bool(nng_listener, const char *, bool *);
extern int nng_listener_getopt_int(nng_listener, const char *, int *);
extern int nng_listener_getopt_ms(
    nng_listener, const char *, nng_duration *);
extern int nng_listener_getopt_size(nng_listener, const char *, size_t *);
extern int nng_listener_getopt_sockaddr(
    nng_listener, const char *, nng_sockaddr *);
extern int nng_listener_getopt_uint64(
    nng_listener, const char *, uint64_t *);
extern int nng_listener_getopt_ptr(nng_listener, const char *, void **);
extern int nng_listener_getopt_string(nng_listener, const char *, char **);
extern int nng_listener_setopt(
    nng_listener, const char *, const void *, size_t);
extern int nng_listener_setopt_bool(nng_listener, const char *, bool);
extern int nng_listener_setopt_int(nng_listener, const char *, int);
extern int nng_listener_setopt_ms(nng_listener, const char *, nng_duration);
extern int nng_listener_setopt_size(nng_listener, const char *, size_t);
extern int nng_listener_setopt_uint64(nng_listener, const char *, uint64_t);
extern int nng_listener_setopt_ptr(nng_listener, const char *, void *);
extern int nng_listener_setopt_string(
    nng_listener, const char *, const char *);
extern int nng_pipe_getopt(nng_pipe, const char *, void *, size_t *);
extern int nng_pipe_getopt_bool(nng_pipe, const char *, bool *);
extern int nng_pipe_getopt_int(nng_pipe, const char *, int *);
extern int nng_pipe_getopt_ms(nng_pipe, const char *, nng_duration *);
extern int nng_pipe_getopt_size(nng_pipe, const char *, size_t *);
extern int nng_pipe_getopt_sockaddr(nng_pipe, const char *, nng_sockaddr *);
extern int nng_pipe_getopt_uint64(nng_pipe, const char *, uint64_t *);
extern int nng_pipe_getopt_ptr(nng_pipe, const char *, void **);
extern int nng_pipe_getopt_string(nng_pipe, const char *, char **);
extern void nng_closeall(void);
int nng_bus0_open(nng_socket *);
int nng_bus0_open_raw(nng_socket *);
int nng_pair0_open(nng_socket *);
int nng_pair0_open_raw(nng_socket *);
int nng_pair1_open(nng_socket *);
int nng_pair1_open_raw(nng_socket *);
int nng_pair1_open_poly(nng_socket *);
int nng_push0_open(nng_socket *);
int nng_push0_open_raw(nng_socket *);
int nng_pull0_open(nng_socket *);
int nng_pull0_open_raw(nng_socket *);
int nng_pub0_open(nng_socket *);
int nng_pub0_open_raw(nng_socket *);
int nng_sub0_open(nng_socket *);
int nng_sub0_open_raw(nng_socket *);
int nng_req0_open(nng_socket *);
int nng_req0_open_raw(nng_socket *);
int nng_rep0_open(nng_socket *);
int nng_rep0_open_raw(nng_socket *);
int nng_surveyor0_open(nng_socket *);
int nng_surveyor0_open_raw(nng_socket *);
int nng_respondent0_open(nng_socket *);
int nng_respondent0_open_raw(nng_socket *);
typedef enum {
 nng_mqtt_msg_format_binary = 0,
 nng_mqtt_msg_format_utf8 = 1,
} nng_mqtt_msg_format_t;
typedef enum {
 NNG_MQTT_CONNECT = 0x01,
 NNG_MQTT_CONNACK = 0x02,
 NNG_MQTT_PUBLISH = 0x03,
 NNG_MQTT_PUBACK = 0x04,
 NNG_MQTT_PUBREC = 0x05,
 NNG_MQTT_PUBREL = 0x06,
 NNG_MQTT_PUBCOMP = 0x07,
 NNG_MQTT_SUBSCRIBE = 0x08,
 NNG_MQTT_SUBACK = 0x09,
 NNG_MQTT_UNSUBSCRIBE = 0x0A,
 NNG_MQTT_UNSUBACK = 0x0B,
 NNG_MQTT_PINGREQ = 0x0C,
 NNG_MQTT_PINGRESP = 0x0D,
 NNG_MQTT_DISCONNECT = 0x0E,
 NNG_MQTT_AUTH = 0x0F
} nng_mqtt_packet_type;
typedef enum {
 SUCCESS = 0,
 NORMAL_DISCONNECTION = 0,
 GRANTED_QOS_0 = 0,
 GRANTED_QOS_1 = 1,
 GRANTED_QOS_2 = 2,
 DISCONNECT_WITH_WILL_MESSAGE = 4,
 NO_MATCHING_SUBSCRIBERS = 16,
 NO_SUBSCRIPTION_EXISTED = 17,
 CONTINUE_AUTHENTICATION = 24,
 RE_AUTHENTICATE = 25,
 UNSPECIFIED_ERROR = 128,
 MALFORMED_PACKET = 129,
 PROTOCOL_ERROR = 130,
 IMPLEMENTATION_SPECIFIC_ERROR = 131,
 UNSUPPORTED_PROTOCOL_VERSION = 132,
 CLIENT_IDENTIFIER_NOT_VALID = 133,
 BAD_USER_NAME_OR_PASSWORD = 134,
 NOT_AUTHORIZED = 135,
 SERVER_UNAVAILABLE = 136,
 SERVER_BUSY = 137,
 BANNED = 138,
 SERVER_SHUTTING_DOWN = 139,
 BAD_AUTHENTICATION_METHOD = 140,
 KEEP_ALIVE_TIMEOUT = 141,
 SESSION_TAKEN_OVER = 142,
 TOPIC_FILTER_INVALID = 143,
 TOPIC_NAME_INVALID = 144,
 PACKET_IDENTIFIER_IN_USE = 145,
 PACKET_IDENTIFIER_NOT_FOUND = 146,
 RECEIVE_MAXIMUM_EXCEEDED = 147,
 TOPIC_ALIAS_INVALID = 148,
 PACKET_TOO_LARGE = 149,
 MESSAGE_RATE_TOO_HIGH = 150,
 QUOTA_EXCEEDED = 151,
 ADMINISTRATIVE_ACTION = 152,
 PAYLOAD_FORMAT_INVALID = 153,
 RETAIN_NOT_SUPPORTED = 154,
 QOS_NOT_SUPPORTED = 155,
 USE_ANOTHER_SERVER = 156,
 SERVER_MOVED = 157,
 SHARED_SUBSCRIPTIONS_NOT_SUPPORTED = 158,
 CONNECTION_RATE_EXCEEDED = 159,
 MAXIMUM_CONNECT_TIME = 160,
 SUBSCRIPTION_IDENTIFIERS_NOT_SUPPORTED = 161,
 WILDCARD_SUBSCRIPTIONS_NOT_SUPPORTED = 162
} reason_code;
typedef enum {
 PAYLOAD_FORMAT_INDICATOR = 1,
 MESSAGE_EXPIRY_INTERVAL = 2,
 CONTENT_TYPE = 3,
 RESPONSE_TOPIC = 8,
 CORRELATION_DATA = 9,
 SUBSCRIPTION_IDENTIFIER = 11,
 SESSION_EXPIRY_INTERVAL = 17,
 ASSIGNED_CLIENT_IDENTIFIER = 18,
 SERVER_KEEP_ALIVE = 19,
 AUTHENTICATION_METHOD = 21,
 AUTHENTICATION_DATA = 22,
 REQUEST_PROBLEM_INFORMATION = 23,
 WILL_DELAY_INTERVAL = 24,
 REQUEST_RESPONSE_INFORMATION = 25,
 RESPONSE_INFORMATION = 26,
 SERVER_REFERENCE = 28,
 REASON_STRING = 31,
 RECEIVE_MAXIMUM = 33,
 TOPIC_ALIAS_MAXIMUM = 34,
 TOPIC_ALIAS = 35,
 PUBLISH_MAXIMUM_QOS = 36,
 RETAIN_AVAILABLE = 37,
 USER_PROPERTY = 38,
 MAXIMUM_PACKET_SIZE = 39,
 WILDCARD_SUBSCRIPTION_AVAILABLE = 40,
 SUBSCRIPTION_IDENTIFIER_AVAILABLE = 41,
 SHARED_SUBSCRIPTION_AVAILABLE = 42
} properties_type;
struct mqtt_buf_t {
 uint32_t length;
 uint8_t *buf;
};
typedef struct mqtt_buf_t mqtt_buf;
typedef struct mqtt_buf_t nng_mqtt_buffer;
typedef struct mqtt_buf_t nng_mqtt_topic;
struct mqtt_kv_t {
 mqtt_buf key;
 mqtt_buf value;
};
typedef struct mqtt_kv_t mqtt_kv;
typedef struct mqtt_topic_qos_t {
 nng_mqtt_topic topic;
 uint8_t qos;
 uint8_t nolocal;
 uint8_t rap;
 uint8_t retain_handling;
} mqtt_topic_qos;
typedef struct mqtt_topic_qos_t nng_mqtt_topic_qos;
extern uint16_t nni_msg_get_pub_pid(nng_msg *m);
struct mqtt_string {
 char * body;
 uint32_t len;
};
typedef struct mqtt_string mqtt_string;
struct mqtt_string_node {
 struct mqtt_string_node *next;
 mqtt_string * it;
};
typedef struct mqtt_string_node mqtt_string_node;
struct mqtt_binary {
 uint8_t *body;
 uint32_t len;
};
typedef struct mqtt_binary mqtt_binary;
struct mqtt_str_pair {
 char * key;
 uint32_t len_key;
 char * val;
 uint32_t len_val;
};
typedef struct mqtt_str_pair mqtt_str_pair;
union Property_type {
 uint8_t u8;
 uint16_t u16;
 uint32_t u32;
 uint32_t varint;
 mqtt_buf binary;
 mqtt_buf str;
 mqtt_kv strpair;
};
typedef enum {
 U8,
 U16,
 U32,
 VARINT,
 BINARY,
 STR,
 STR_PAIR,
 UNKNOWN
} property_type_enum;
struct property_data {
 property_type_enum p_type;
 union Property_type p_value;
 bool is_copy;
};
typedef struct property_data property_data;
struct property {
 uint8_t id;
 property_data data;
 struct property *next;
};
typedef struct property property;
int nng_mqtt_msg_alloc(nng_msg **, size_t);
int nng_mqtt_msg_proto_data_alloc(nng_msg *);
void nng_mqtt_msg_proto_data_free(nng_msg *);
int nng_mqtt_msg_encode(nng_msg *);
int nng_mqtt_msg_decode(nng_msg *);
int nng_mqttv5_msg_encode(nng_msg *);
int nng_mqttv5_msg_decode(nng_msg *);
int nng_mqtt_msg_validate(nng_msg *, uint8_t);
void nng_mqtt_msg_set_packet_type(nng_msg *, nng_mqtt_packet_type);
nng_mqtt_packet_type nng_mqtt_msg_get_packet_type(nng_msg *);
void nng_mqtt_msg_set_connect_proto_version(nng_msg *, uint8_t);
void nng_mqtt_msg_set_connect_keep_alive(nng_msg *, uint16_t);
void nng_mqtt_msg_set_connect_client_id(nng_msg *, const char *);
void nng_mqtt_msg_set_connect_user_name(nng_msg *, const char *);
void nng_mqtt_msg_set_connect_password(nng_msg *, const char *);
void nng_mqtt_msg_set_connect_clean_session(nng_msg *, bool);
void nng_mqtt_msg_set_connect_will_topic(nng_msg *, const char *);
void nng_mqtt_msg_set_connect_will_msg(
    nng_msg *, uint8_t *, uint32_t);
void nng_mqtt_msg_set_connect_will_retain(nng_msg *, bool);
void nng_mqtt_msg_set_connect_will_qos(nng_msg *, uint8_t);
void nng_mqtt_msg_set_connect_property(nng_msg *, property *);
const char *nng_mqtt_msg_get_connect_user_name(nng_msg *);
const char *nng_mqtt_msg_get_connect_password(nng_msg *);
bool nng_mqtt_msg_get_connect_clean_session(nng_msg *);
uint8_t nng_mqtt_msg_get_connect_proto_version(nng_msg *);
uint16_t nng_mqtt_msg_get_connect_keep_alive(nng_msg *);
const char *nng_mqtt_msg_get_connect_client_id(nng_msg *);
const char *nng_mqtt_msg_get_connect_will_topic(nng_msg *);
uint8_t * nng_mqtt_msg_get_connect_will_msg(nng_msg *, uint32_t *);
bool nng_mqtt_msg_get_connect_will_retain(nng_msg *);
uint8_t nng_mqtt_msg_get_connect_will_qos(nng_msg *);
property *nng_mqtt_msg_get_connect_property(nng_msg *);
void nng_mqtt_msg_set_connack_return_code(nng_msg *, uint8_t);
void nng_mqtt_msg_set_connack_flags(nng_msg *, uint8_t);
void nng_mqtt_msg_set_connack_property(nng_msg *, property *);
uint8_t nng_mqtt_msg_get_connack_return_code(nng_msg *);
uint8_t nng_mqtt_msg_get_connack_flags(nng_msg *);
property *nng_mqtt_msg_get_connack_property(nng_msg *);
void nng_mqtt_msg_set_publish_qos(nng_msg *, uint8_t);
uint8_t nng_mqtt_msg_get_publish_qos(nng_msg *);
void nng_mqtt_msg_set_publish_retain(nng_msg *, bool);
bool nng_mqtt_msg_get_publish_retain(nng_msg *);
void nng_mqtt_msg_set_publish_dup(nng_msg *, bool);
bool nng_mqtt_msg_get_publish_dup(nng_msg *);
int nng_mqtt_msg_set_publish_topic(nng_msg *, const char *);
const char *nng_mqtt_msg_get_publish_topic(nng_msg *, uint32_t *);
void nng_mqtt_msg_set_publish_payload(nng_msg *, uint8_t *, uint32_t);
uint8_t *nng_mqtt_msg_get_publish_payload(nng_msg *, uint32_t *);
property *nng_mqtt_msg_get_publish_property(nng_msg *);
void nng_mqtt_msg_set_publish_property(nng_msg *, property *);
uint16_t nng_mqtt_msg_get_puback_packet_id(nng_msg *);
property *nng_mqtt_msg_get_puback_property(nng_msg *);
void nng_mqtt_msg_set_puback_property(nng_msg *, property *);
uint16_t nng_mqtt_msg_get_pubrec_packet_id(nng_msg *);
property *nng_mqtt_msg_get_pubrec_property(nng_msg *);
void nng_mqtt_msg_set_pubrec_property(nng_msg *, property *);
uint16_t nng_mqtt_msg_get_pubrel_packet_id(nng_msg *);
property *nng_mqtt_msg_get_pubrel_property(nng_msg *);
void nng_mqtt_msg_set_pubrel_property(nng_msg *, property *);
uint16_t nng_mqtt_msg_get_pubcomp_packet_id(nng_msg *);
property *nng_mqtt_msg_get_pubcomp_property(nng_msg *);
void nng_mqtt_msg_set_pubcomp_property(nng_msg *, property *);
nng_mqtt_topic_qos *nng_mqtt_msg_get_subscribe_topics(
    nng_msg *, uint32_t *);
void nng_mqtt_msg_set_subscribe_topics(
    nng_msg *, nng_mqtt_topic_qos *, uint32_t);
property *nng_mqtt_msg_get_subscribe_property(nng_msg *);
void nng_mqtt_msg_set_subscribe_property(nng_msg *, property *);
void nng_mqtt_msg_set_suback_return_codes(
    nng_msg *, uint8_t *, uint32_t);
uint8_t *nng_mqtt_msg_get_suback_return_codes(nng_msg *, uint32_t *);
property *nng_mqtt_msg_get_suback_property(nng_msg *);
void nng_mqtt_msg_set_suback_property(nng_msg *, property *);
void nng_mqtt_msg_set_unsubscribe_topics(
        nng_msg *, nng_mqtt_topic *, uint32_t);
nng_mqtt_topic *nng_mqtt_msg_get_unsubscribe_topics(
    nng_msg *, uint32_t *);
property *nng_mqtt_msg_get_unsubscribe_property(nng_msg *);
void nng_mqtt_msg_set_unsubscribe_property(nng_msg *, property *);
void nng_mqtt_msg_set_unsuback_return_codes(
    nng_msg *, uint8_t *, uint32_t);
uint8_t *nng_mqtt_msg_get_unsuback_return_codes(nng_msg *, uint32_t *);
property *nng_mqtt_msg_get_disconnect_property(nng_msg *);
void nng_mqtt_msg_set_disconnect_property(nng_msg *, property *);
nng_mqtt_topic *nng_mqtt_topic_array_create(size_t);
void nng_mqtt_topic_array_set(nng_mqtt_topic *, size_t, const char *);
void nng_mqtt_topic_array_free(nng_mqtt_topic *, size_t);
nng_mqtt_topic_qos *nng_mqtt_topic_qos_array_create(size_t);
void nng_mqtt_topic_qos_array_set(nng_mqtt_topic_qos *, size_t,
           const char *, uint32_t, uint8_t, uint8_t, uint8_t, uint8_t);
void nng_mqtt_topic_qos_array_free(nng_mqtt_topic_qos *, size_t);
int nng_mqtt_set_connect_cb(nng_socket, nng_pipe_cb, void *);
int nng_mqtt_set_disconnect_cb(nng_socket, nng_pipe_cb, void *);
void nng_mqtt_msg_dump(nng_msg *, uint8_t *, uint32_t, bool);
void nng_mqtt_msg_set_disconnect_reason_code(nng_msg *msg, uint8_t reason_code);
uint32_t get_mqtt_properties_len(property *prop);
int mqtt_property_free(property *prop);
void mqtt_property_foreach(property *prop, void (*cb)(property *));
int mqtt_property_dup(property **dup, const property *src);
property *mqtt_property_pub_by_will(property *will_prop);
int mqtt_property_value_copy(property *dst, const property *src);
property *mqtt_property_alloc(void);
property *mqtt_property_set_value_u8(uint8_t prop_id, uint8_t value);
property *mqtt_property_set_value_u16(uint8_t prop_id, uint16_t value);
property *mqtt_property_set_value_u32(uint8_t prop_id, uint32_t value);
property *mqtt_property_set_value_varint(uint8_t prop_id, uint32_t value);
property *mqtt_property_set_value_binary(uint8_t prop_id, uint8_t *value, uint32_t len, bool copy_value);
property *mqtt_property_set_value_str( uint8_t prop_id, const char *value, uint32_t len, bool copy_value);
property *mqtt_property_set_value_strpair(uint8_t prop_id, const char *key, uint32_t key_len, const char *value, uint32_t value_len, bool copy_value);
property_type_enum mqtt_property_get_value_type(uint8_t prop_id);
property_data *mqtt_property_get_value(property *prop, uint8_t prop_id);
void mqtt_property_append(property *prop_list, property *last);
int nng_mqtt_client_open(nng_socket *);
int nng_mqttv5_client_open(nng_socket *);
typedef struct nng_mqtt_client nng_mqtt_client;
typedef void(nng_mqtt_send_cb)(nng_mqtt_client *client, nng_msg *msg, void *);
struct nng_mqtt_client{
 nng_socket sock;
 nng_aio *send_aio;
 nng_aio *recv_aio;
 void *msgq;
 void *obj;
 bool async;
 nng_mqtt_send_cb *cb;
};
nng_mqtt_client *nng_mqtt_client_alloc(nng_socket, nng_mqtt_send_cb, bool);
void nng_mqtt_client_free(nng_mqtt_client*, bool);
int nng_mqtt_subscribe(nng_socket, nng_mqtt_topic_qos *, size_t, property *);
int nng_mqtt_subscribe_async(nng_mqtt_client *, nng_mqtt_topic_qos *, size_t, property *);
int nng_mqtt_unsubscribe(nng_socket, nng_mqtt_topic *, size_t, property *);
int nng_mqtt_unsubscribe_async(
    nng_mqtt_client *, nng_mqtt_topic *sbs, size_t count, property *pl);
int nng_mqtt_disconnect(nng_socket *, uint8_t, property *);
typedef struct nng_mqtt_sqlite_option nng_mqtt_sqlite_option;
typedef struct conf_tls conf_tls;
typedef struct conf_quic conf_quic;
struct conf_tls {
 bool enable;
 char *url;
 char *cafile;
 char *certfile;
 char *keyfile;
 char *ca;
 char *cert;
 char *key;
 char *key_password;
 bool verify_peer;
 bool set_fail;
};
struct conf_quic {
 conf_tls tls;
 bool qos_first;
 bool multi_stream;
 uint64_t qkeepalive;
 uint64_t qconnect_timeout;
 uint32_t qdiscon_timeout;
 uint32_t qidle_timeout;
 uint8_t qcongestion_control;
};
/*
conf_quic* conf_quic_tls_create(char *cafile, char *certfile,
    char *keyfile, char *key_pwd, bool verify_peer, bool multi_stream, bool qos_first,
    int qkeepalive, int qconnect_timeout, int qdiscon_timeout, int qidle_timeout);
    */
void conf_quic_tls_create(conf_quic **, char *cafile, char *certfile,
    char *keyfile, char *key_pwd);
int nng_mqttv5_quic_client_open(nng_socket *, const char *url);
int nng_mqttv5_quic_client_open_conf(
    nng_socket *sock, const char *url, conf_quic *conf);
int nng_mqtt_quic_client_open(nng_socket *, const char *url);
int nng_mqtt_quic_client_open_conf(
    nng_socket *sock, const char *url, conf_quic *conf);
int nng_mqtt_quic_set_connect_cb(
    nng_socket *, int (*cb)(void *, void *), void *arg);
int nng_mqtt_quic_set_disconnect_cb(
    nng_socket *, int (*cb)(void *, void *), void *arg);
int nng_mqtt_quic_set_msg_recv_cb(
    nng_socket *, int (*cb)(void *, void *), void *arg);
int nng_mqtt_quic_set_msg_send_cb(
    nng_socket *, int (*cb)(void *, void *), void *arg);
int nng_mqtt_quic_ack_callback_set(
    nng_socket *sock, void (*cb)(void *), void *arg);
typedef struct nng_tls_config nng_tls_config;
typedef enum nng_tls_mode {
 NNG_TLS_MODE_CLIENT = 0,
 NNG_TLS_MODE_SERVER = 1,
} nng_tls_mode;
typedef enum nng_tls_auth_mode {
 NNG_TLS_AUTH_MODE_NONE = 0,
 NNG_TLS_AUTH_MODE_OPTIONAL = 1,
 NNG_TLS_AUTH_MODE_REQUIRED = 2,
} nng_tls_auth_mode;
typedef enum nng_tls_version {
 NNG_TLS_1_0 = 0x301,
 NNG_TLS_1_1 = 0x302,
 NNG_TLS_1_2 = 0x303,
 NNG_TLS_1_3 = 0x304
} nng_tls_version;
int nng_tls_config_alloc(nng_tls_config **, nng_tls_mode);
void nng_tls_config_hold(nng_tls_config *);
void nng_tls_config_free(nng_tls_config *);
int nng_tls_config_server_name(nng_tls_config *, const char *);
int nng_tls_config_ca_chain(
    nng_tls_config *, const char *, const char *);
int nng_tls_config_own_cert(
    nng_tls_config *, const char *, const char *, const char *);
int nng_tls_config_auth_mode(nng_tls_config *, nng_tls_auth_mode);
int nng_tls_config_ca_file(nng_tls_config *, const char *);
int nng_tls_config_cert_key_file(
    nng_tls_config *, const char *, const char *);
int nng_tls_config_version(
    nng_tls_config *, nng_tls_version, nng_tls_version);
const char *nng_tls_engine_name(void);
const char *nng_tls_engine_description(void);
bool nng_tls_engine_fips_mode(void);
int nng_tls_register(void);
#define NNG_FLAG_ALLOC 1u    // Recv to allocate receive buffer
#define NNG_FLAG_NONBLOCK 2u // Non-blocking operations
#define NNG_MAJOR_VERSION 1
#define NNG_MINOR_VERSION 6
#define NNG_PATCH_VERSION 0
